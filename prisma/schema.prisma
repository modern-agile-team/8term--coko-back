// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Part {
  EASY
  NORMAL
  HARD
  VERY_HARD
}

enum Category {
  COMBINATION
  MULTIPLE_CHOICE
  OX_SELECTOR
  SHORT_ANSWER
}

model Quizzes {
  id           Int      @id @default(autoincrement())
  part         Part
  sectionId    Int      @map("section_id")
  title        String   @db.VarChar(255)
  question     String   @db.VarChar(1000)
  answer       String[]
  answerChoice String[] @map("answer_choice")
  category     Category
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  section      Sections @relation(fields: [sectionId], references: [id])

  @@map("quizzes")
}

model Sections {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(255)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  quizzes   Quizzes[]

  @@map("sections")
}

model User {
  id                     Int      @id @default(autoincrement())
  provider               String   @db.VarChar(20)
  providerId             String   @unique @map("provider_id")
  name                   String   @db.VarChar(30)
  profileImage           String?  @map("profile_image")
  maxHealthPoint         Int      @default(5) @map("max_health_point")
  lastLogin              DateTime @default(now()) @map("last_login")
  level                  Int      @default(1)
  experience             Int      @default(0)
  experienceForNextLevel Int      @default(50) @map("experience_for_next_level")
  point                  Int      @default(0)
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")
  token                  Token[]

  @@map("users")
}

model Token {
  id                 Int     @id @default(autoincrement())
  userId             Int     @unique @map("user_id")
  socialAccessToken  String  @map("social_access_token")
  socialRefreshToken String? @map("social_refresh_token")
  user               User    @relation(fields: [userId], references: [id])

  @@map("token")
}
